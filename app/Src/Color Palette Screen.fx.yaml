"'Color Palette Screen' As screen":

    lblColorMixerPalette As label:
        Color: =RGBA(26, 26, 26, 1)
        Font: =Font.'Courier New'
        Height: =633
        LineHeight: =1
        Size: =9
        Text: =PaletteAsJSON
        VerticalAlign: =VerticalAlign.Top
        Width: =469
        X: =664
        Y: =7
        ZIndex: =1

    btnColorMixer As button:
        BorderColor: =RGBA(116, 116, 116, 1)
        BorderThickness: =1
        Color: =RGBA(26, 26, 26, 1)
        Fill: =RGBA(0, 0, 0, 0)
        Height: =41
        OnSelect: |-
            =Set( PaletteAsJSON, Blank() );
            ColorMixer.Create( txtColorMixerCode.Text );
            Set( PaletteAsJSON, JSON( ColorMixer.Colors, JSONFormat.IndentFour ) );
        RadiusBottomLeft: =2
        RadiusBottomRight: =2
        RadiusTopLeft: =2
        RadiusTopRight: =2
        Size: =14
        Text: ="Mix Colors!"
        Width: =138
        X: =273
        Y: =70
        ZIndex: =2

    txtColorMixerCode As text:
        BorderColor: =RGBA(149, 149, 149, 1)
        BorderThickness: =1
        Color: =RGBA(26, 26, 26, 1)
        Default: =""
        FocusedBorderThickness: =1
        Height: =52
        HintText: |-
            ="#3d297c"
        RadiusBottomLeft: =2
        RadiusBottomRight: =2
        RadiusTopLeft: =2
        RadiusTopRight: =2
        Size: =16
        Width: =223
        X: =28
        Y: =65
        ZIndex: =3

    lblColorMixerCode As label:
        Color: =RGBA(26, 26, 26, 1)
        Height: =29
        Size: =14
        Text: |-
            ="Enter a HEX Color:"
        Width: =196
        X: =28
        Y: =36
        ZIndex: =4

    ColorMixer As comColorPalette:
        BrightnessLevel: =Round( Sqrt( (0.241 * RGBRecord.R^2) + (0.691 * RGBRecord.G^2) + (0.068 * RGBRecord.B^2) ), 3 )
        Create: |
            =// HEX Reference Table
                Set( ColorMixerHexTable, Table(
                    {Hex: "1", Dec: 1},
                    {Hex: "2", Dec: 2},
                    {Hex: "3", Dec: 3},
                    {Hex: "4", Dec: 4},
                    {Hex: "5", Dec: 5},
                    {Hex: "6", Dec: 6},
                    {Hex: "7", Dec: 7},
                    {Hex: "8", Dec: 8},
                    {Hex: "9", Dec: 9},
                    {Hex: "A", Dec: 10},
                    {Hex: "B", Dec: 11},
                    {Hex: "C", Dec: 12},
                    {Hex: "D", Dec: 13},
                    {Hex: "E", Dec: 14},
                    {Hex: "F", Dec: 15}
                ) );
            
            // Other References
                Set( ColorMixerConfig, {
                    Fading: {
                        Alternate: 0.35,
                        Tertiary: -0.27,
                        Back: 0.92
                    },
                    FontColor: {
                        Light: ColorValue( "#FAFAFA" ),
                        Dark: ColorValue( "#141414" )
                    },
                    Treshold: {
                        LightOrDark: 130
                    }
                } );
            
            // If we have a HexColorCode, we use it.  If not, we generate a random color.
                Set( ColorMixerBase, If( IsBlank( HexColorCode ) Or HexColorCode = "", Self.RandomHexColor(), HexColorCode ) );
            
            // Establish the Hexadecimal Value for each 4 colors.
                Set( ColorMixerMainHex, Self.SanitizeHexCode( ColorMixerBase ) );
                Set( ColorMixerAltHex, Self.SanitizeHexCode( JSON( ColorFade( ColorValue( ColorMixerMainHex ), ColorMixerConfig.Fading.Alternate ) ) ) );
                Set( ColorMixerTerHex, Self.SanitizeHexCode( JSON( ColorFade( ColorValue( ColorMixerMainHex ), ColorMixerConfig.Fading.Tertiary ) ) ) );
                Set( ColorMixerBackHex, Self.SanitizeHexCode( JSON( ColorFade( ColorValue( ColorMixerMainHex ), ColorMixerConfig.Fading.Back ) ) ) );
            
            // Process MAIN Color
                Set( ColorMixingHex, ColorMixerMainHex );
                Set( ColorMixingDec, Self.HexToRGB( ColorMixingHex ) );
                Set( ColorMixingBrightness, Self.BrightnessLevel( ColorMixingDec ) );
                Set( ColorMixingShadeName, If( ColorMixingBrightness < ColorMixerConfig.Treshold.LightOrDark, "dark", "light" ) );
                Set( ColorMixedMain, 
                                {
                                    Hex: ColorMixingHex,
                                    Dec: ColorMixingDec,
                                    Shade: ColorMixingShadeName,
                                    IsLight: ( ColorMixingShadeName = "light" ),
                                    IsDark: ( ColorMixingShadeName = "dark" ),
                                    Color: ColorValue( ColorMixingHex ),
                                    Font: ( If( ColorMixingShadeName = "light", ColorMixerConfig.FontColor.Dark, ColorMixerConfig.FontColor.Light ) )
                                }
                );
            
            // Process ALTERNATE Color
                Set( ColorMixingHex, ColorMixerAltHex );
                Set( ColorMixingDec, Self.HexToRGB( ColorMixingHex ) );
                Set( ColorMixingBrightness, Self.BrightnessLevel( ColorMixingDec ) );
                Set( ColorMixingShadeName, If( ColorMixingBrightness < ColorMixerConfig.Treshold.LightOrDark, "dark", "light" ) );
                Set( ColorMixedAlt, 
                                {
                                    Hex: ColorMixingHex,
                                    Dec: ColorMixingDec,
                                    Shade: ColorMixingShadeName,
                                    IsLight: ( ColorMixingShadeName = "light" ),
                                    IsDark: ( ColorMixingShadeName = "dark" ),
                                    Color: ColorValue( ColorMixingHex ),
                                    Font: ( If( ColorMixingShadeName = "light", ColorMixerConfig.FontColor.Dark, ColorMixerConfig.FontColor.Light ) )
                                }
                );
            
            // Process TERTIARY Color
                Set( ColorMixingHex, ColorMixerTerHex );
                Set( ColorMixingDec, Self.HexToRGB( ColorMixingHex ) );
                Set( ColorMixingBrightness, Self.BrightnessLevel( ColorMixingDec ) );
                Set( ColorMixingShadeName, If( ColorMixingBrightness < ColorMixerConfig.Treshold.LightOrDark, "dark", "light" ) );
                Set( ColorMixedTer, 
                                {
                                    Hex: ColorMixingHex,
                                    Dec: ColorMixingDec,
                                    Shade: ColorMixingShadeName,
                                    IsLight: ( ColorMixingShadeName = "light" ),
                                    IsDark: ( ColorMixingShadeName = "dark" ),
                                    Color: ColorValue( ColorMixingHex ),
                                    Font: ( If( ColorMixingShadeName = "light", ColorMixerConfig.FontColor.Dark, ColorMixerConfig.FontColor.Light ) )
                                }
                );
            
            // Process BACK Color
                Set( ColorMixingHex, ColorMixerBackHex );
                Set( ColorMixingDec, Self.HexToRGB( ColorMixingHex ) );
                Set( ColorMixingBrightness, Self.BrightnessLevel( ColorMixingDec ) );
                Set( ColorMixingShadeName, If( ColorMixingBrightness < ColorMixerConfig.Treshold.LightOrDark, "dark", "light" ) );
                Set( ColorMixedBack, 
                                {
                                    Hex: ColorMixingHex,
                                    Dec: ColorMixingDec,
                                    Shade: ColorMixingShadeName,
                                    IsLight: ( ColorMixingShadeName = "light" ),
                                    IsDark: ( ColorMixingShadeName = "dark" ),
                                    Color: ColorValue( ColorMixingHex ),
                                    Font: ( If( ColorMixingShadeName = "light", ColorMixerConfig.FontColor.Dark, ColorMixerConfig.FontColor.Light ) )
                                }
                );
            
            // Build the Palette
                Set( ColorMixerPalette, {
                    main: ColorMixedMain,
                    alt: ColorMixedAlt,
                    ter: ColorMixedTer,
                    back: ColorMixedBack
                } );
            
                Trace( "Color Palette Created", TraceSeverity.Information, ColorMixerPalette );
        HexToRGB: |-
            ={
                R: Self.PrimaryHexToDec( Mid( HexToConvert, 2, 2 ) ),
                G: Self.PrimaryHexToDec( Mid( HexToConvert, 4, 2 ) ),
                B: Self.PrimaryHexToDec( Mid( HexToConvert, 6, 2 ) )
            }
        PrimaryHexToDec: =( LookUp( ColorMixerHexTable, Hex = Left( PrimaryHexCode, 1 ) ).Dec * 16 ) + LookUp( ColorMixerHexTable, Hex = Right( PrimaryHexCode, 1 ) ).Dec
        RandomHexColor: |-
            ="#" & First( Shuffle( ColorMixerHexTable ) ).Hex & First( Shuffle( ColorMixerHexTable ) ).Hex & First( Shuffle( ColorMixerHexTable ) ).Hex & First( Shuffle( ColorMixerHexTable ) ).Hex & First( Shuffle( ColorMixerHexTable ) ).Hex & First( Shuffle( ColorMixerHexTable ) ).Hex
        SanitizeHexCode: |-
            ="#" & Left( Upper( Substitute( Substitute( DirtyHexCode, Char(34), "" ), "#", "" ) ), 6 )
        X: =8
        Y: =532
        ZIndex: =5

